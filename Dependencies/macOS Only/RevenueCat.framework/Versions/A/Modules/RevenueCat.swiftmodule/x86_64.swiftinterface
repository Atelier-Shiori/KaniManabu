// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-macos10.13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RevenueCat
import AppKit
import Foundation
import IOKit
@_exported import RevenueCat
import StoreKit
import Swift
import _Concurrency
@_hasMissingDesignatedInitializers @objc(RCOffering) public class Offering : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let serverDescription: Swift.String
  @objc final public let availablePackages: [RevenueCat.Package]
  @objc public var lifetime: RevenueCat.Package? {
    get
  }
  @objc public var annual: RevenueCat.Package? {
    get
  }
  @objc public var sixMonth: RevenueCat.Package? {
    get
  }
  @objc public var threeMonth: RevenueCat.Package? {
    get
  }
  @objc public var twoMonth: RevenueCat.Package? {
    get
  }
  @objc public var monthly: RevenueCat.Package? {
    get
  }
  @objc public var weekly: RevenueCat.Package? {
    get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public func package(identifier: Swift.String?) -> RevenueCat.Package?
  @objc public subscript(key: Swift.String) -> RevenueCat.Package? {
    @objc get
  }
  @objc deinit
}
extension RevenueCat.Offering : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
@_hasMissingDesignatedInitializers @objc(RCOfferings) public class Offerings : ObjectiveC.NSObject {
  @objc final public let all: [Swift.String : RevenueCat.Offering]
  @objc public var current: RevenueCat.Offering? {
    @objc get
  }
  @objc public func offering(identifier: Swift.String?) -> RevenueCat.Offering?
  @objc public subscript(key: Swift.String) -> RevenueCat.Offering? {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension RevenueCat.StoreProduct {
  @objc(RCStoreProductCategory) public enum ProductCategory : Swift.Int {
    case subscription
    case nonSubscription
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(RCStoreProductType) public enum ProductType : Swift.Int {
    case consumable
    case nonConsumable
    case nonRenewableSubscription
    case autoRenewableSubscription
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension RevenueCat.Purchases {
  @available(iOS, obsoleted: 1, renamed: "restorePurchases(completion:)")
  @available(tvOS, obsoleted: 1, renamed: "restorePurchases(completion:)")
  @available(watchOS, obsoleted: 1, renamed: "restorePurchases(completion:)")
  @available(macOS, obsoleted: 1, renamed: "restorePurchases(completion:)")
  @objc(restoreTransactionsWithCompletionBlock:) dynamic public func restoreTransactions(completion: ((RevenueCat.CustomerInfo?, Swift.Error?) -> Swift.Void)? = nil)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS, unavailable, introduced: 13.0, renamed: "restorePurchases()")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "restorePurchases()")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "restorePurchases()")
  @available(macOS, unavailable, introduced: 10.15, renamed: "restorePurchases()")
  @available(macCatalyst, unavailable, introduced: 13.0, renamed: "restorePurchases()")
  public func restoreTransactions() async throws -> RevenueCat.CustomerInfo
  #endif

  @available(iOS, obsoleted: 1, renamed: "getCustomerInfo(completion:)")
  @available(tvOS, obsoleted: 1, renamed: "getCustomerInfo(completion:)")
  @available(watchOS, obsoleted: 1, renamed: "getCustomerInfo(completion:)")
  @available(macOS, obsoleted: 1, renamed: "getCustomerInfo(completion:)")
  @objc dynamic public func customerInfo(completion: @escaping (RevenueCat.CustomerInfo?, Swift.Error?) -> Swift.Void)
  @available(iOS, obsoleted: 1, renamed: "getCustomerInfo(completion:)")
  @available(tvOS, obsoleted: 1, renamed: "getCustomerInfo(completion:)")
  @available(watchOS, obsoleted: 1, renamed: "getCustomerInfo(completion:)")
  @available(macOS, obsoleted: 1, renamed: "getCustomerInfo(completion:)")
  @objc(purchaserInfoWithCompletionBlock:) dynamic public func purchaserInfo(completion: @escaping (RevenueCat.CustomerInfo?, Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS, unavailable, introduced: 13.0, renamed: "customerInfo()")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "customerInfo()")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "customerInfo()")
  @available(macOS, unavailable, introduced: 10.15, renamed: "customerInfo()")
  @available(macCatalyst, unavailable, introduced: 13.0, renamed: "customerInfo()")
  public func purchaserInfo() async throws -> RevenueCat.CustomerInfo
  #endif

  @available(iOS, obsoleted: 1, renamed: "getProducts(_:completion:)")
  @available(tvOS, obsoleted: 1, renamed: "getProducts(_:completion:)")
  @available(watchOS, obsoleted: 1, renamed: "getProducts(_:completion:)")
  @available(macOS, obsoleted: 1, renamed: "getProducts(_:completion:)")
  @objc(productsWithIdentifiers:completionBlock:) dynamic public func products(_ productIdentifiers: [Swift.String], completion: @escaping ([StoreKit.SKProduct]) -> Swift.Void)
  @available(iOS, obsoleted: 1, renamed: "getOfferings(completion:)")
  @available(tvOS, obsoleted: 1, renamed: "getOfferings(completion:)")
  @available(watchOS, obsoleted: 1, renamed: "getOfferings(completion:)")
  @available(macOS, obsoleted: 1, renamed: "getOfferings(completion:)")
  @objc(offeringsWithCompletionBlock:) dynamic public func offerings(completion: @escaping (RevenueCat.Offerings?, Swift.Error?) -> Swift.Void)
  @available(iOS, obsoleted: 1, renamed: "purchase(package:completion:)")
  @available(tvOS, obsoleted: 1, renamed: "purchase(package:completion:)")
  @available(watchOS, obsoleted: 1, renamed: "purchase(package:completion:)")
  @available(macOS, obsoleted: 1, renamed: "purchase(package:completion:)")
  @objc(purchasePackage:withCompletionBlock:) dynamic public func purchasePackage(_ package: RevenueCat.Package, _ completion: @escaping RevenueCat.PurchaseCompletedBlock)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS, unavailable, introduced: 13.0, renamed: "purchase(package:)")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "purchase(package:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "purchase(package:)")
  @available(macOS, unavailable, introduced: 10.15, renamed: "purchase(package:)")
  @available(macCatalyst, unavailable, introduced: 13.0, renamed: "purchase(package:)")
  public func purchasePackage(_ package: RevenueCat.Package) async throws -> RevenueCat.PurchaseResultData
  #endif

  @available(iOS, unavailable, introduced: 12.2, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(tvOS, unavailable, introduced: 12.2, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(macOS, unavailable, introduced: 10.14.4, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(macCatalyst, unavailable, introduced: 13.0, renamed: "purchase(package:promotionalOffer:completion:)")
  @objc(purchasePackage:withDiscount:completionBlock:) dynamic public func purchasePackage(_ package: RevenueCat.Package, discount: StoreKit.SKPaymentDiscount, _ completion: @escaping RevenueCat.PurchaseCompletedBlock)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS, unavailable, introduced: 13.0, renamed: "purchase(package:promotionalOffer:)")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "purchase(package:promotionalOffer:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "purchase(package:promotionalOffer:)")
  @available(macOS, unavailable, introduced: 10.15, renamed: "purchase(package:promotionalOffer:)")
  @available(macCatalyst, unavailable, introduced: 13.0, renamed: "purchase(package:promotionalOffer:)")
  public func purchasePackage(_ package: RevenueCat.Package, discount: StoreKit.SKPaymentDiscount) async throws -> RevenueCat.PurchaseResultData
  #endif

  @available(iOS, obsoleted: 1, renamed: "purchase(product:_:)")
  @available(tvOS, obsoleted: 1, renamed: "purchase(product:_:)")
  @available(watchOS, obsoleted: 1, renamed: "purchase(product:_:)")
  @available(macOS, obsoleted: 1, renamed: "purchase(product:_:)")
  @objc(purchaseProduct:withCompletionBlock:) dynamic public func purchaseProduct(_ product: StoreKit.SKProduct, _ completion: @escaping RevenueCat.PurchaseCompletedBlock)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS, unavailable, introduced: 13.0, renamed: "purchase(product:)")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "purchase(product:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "purchase(product:)")
  @available(macOS, unavailable, introduced: 10.15, renamed: "purchase(product:)")
  @available(macCatalyst, unavailable, introduced: 13.0, renamed: "purchase(product:)")
  public func purchaseProduct(_ product: StoreKit.SKProduct) async throws
  #endif

  @available(iOS, unavailable, introduced: 12.2, renamed: "purchase(product:promotionalOffer:completion:)")
  @available(tvOS, unavailable, introduced: 12.2, renamed: "purchase(product:promotionalOffer:completion:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "purchase(product:promotionalOffer:completion:)")
  @available(macOS, unavailable, introduced: 10.14.4, renamed: "purchase(product:promotionalOffer:completion:)")
  @available(macCatalyst, unavailable, introduced: 13.0, renamed: "purchase(product:promotionalOffer:completion:)")
  @objc(purchaseProduct:withDiscount:completionBlock:) dynamic public func purchaseProduct(_ product: StoreKit.SKProduct, discount: StoreKit.SKPaymentDiscount, _ completion: @escaping RevenueCat.PurchaseCompletedBlock)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS, unavailable, introduced: 13.0, renamed: "purchase(product:promotionalOffer:)")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "purchase(product:promotionalOffer:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "purchase(product:promotionalOffer:)")
  @available(macOS, unavailable, introduced: 10.15, renamed: "purchase(product:promotionalOffer:)")
  @available(macCatalyst, unavailable, introduced: 13.0, renamed: "purchase(product:promotionalOffer:)")
  public func purchaseProduct(_ product: StoreKit.SKProduct, discount: StoreKit.SKPaymentDiscount) async throws
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS, unavailable, introduced: 13.0, renamed: "purchase(package:promotionalOffer:)")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "purchase(package:promotionalOffer:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "purchase(package:promotionalOffer:)")
  @available(macOS, unavailable, introduced: 10.15, renamed: "purchase(package:promotionalOffer:)")
  @available(macCatalyst, unavailable, introduced: 13.0, renamed: "purchase(package:promotionalOffer:)")
  public func purchase(package: RevenueCat.Package, discount: RevenueCat.StoreProductDiscount) async throws -> RevenueCat.PurchaseResultData
  #endif

  @available(iOS, unavailable, introduced: 12.2, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(tvOS, unavailable, introduced: 12.2, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(macOS, unavailable, introduced: 10.14.4, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(macCatalyst, unavailable, introduced: 12.2, renamed: "purchase(package:promotionalOffer:completion:)")
  public func purchase(package: RevenueCat.Package, discount: RevenueCat.StoreProductDiscount, completion: @escaping RevenueCat.PurchaseCompletedBlock)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS, unavailable, introduced: 13.0, renamed: "purchase(package:promotionalOffer:)")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "purchase(package:promotionalOffer:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "purchase(package:promotionalOffer:)")
  @available(macOS, unavailable, introduced: 10.15, renamed: "purchase(package:promotionalOffer:)")
  @available(macCatalyst, unavailable, introduced: 13.0, renamed: "purchase(package:promotionalOffer:)")
  public func purchase(product: RevenueCat.StoreProduct, discount: RevenueCat.StoreProductDiscount) async throws -> RevenueCat.PurchaseResultData
  #endif

  @available(iOS, unavailable, introduced: 12.2, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(tvOS, unavailable, introduced: 12.2, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(macOS, unavailable, introduced: 10.14.4, renamed: "purchase(package:promotionalOffer:completion:)")
  @available(macCatalyst, unavailable, introduced: 12.2, renamed: "purchase(package:promotionalOffer:completion:)")
  public func purchase(product: RevenueCat.StoreProduct, discount: RevenueCat.StoreProductDiscount, completion: @escaping RevenueCat.PurchaseCompletedBlock)
  @available(iOS, unavailable, introduced: 13.0, renamed: "getPromotionalOffer(forProductDiscount:product:)")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "getPromotionalOffer(forProductDiscount:product:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "getPromotionalOffer(forProductDiscount:product:)")
  @available(macOS, unavailable, introduced: 10.15, renamed: "getPromotionalOffer(forProductDiscount:product:)")
  @available(macCatalyst, unavailable, introduced: 13.0, renamed: "getPromotionalOffer(forProductDiscount:product:)")
  public func checkPromotionalDiscountEligibility(forProductDiscount: RevenueCat.StoreProductDiscount, product: RevenueCat.StoreProduct)
  @available(iOS, unavailable, introduced: 12.2, renamed: "getPromotionalOffer(forProductDiscount:product:completion:)")
  @available(tvOS, unavailable, introduced: 12.2, renamed: "getPromotionalOffer(forProductDiscount:product:completion:)")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "getPromotionalOffer(forProductDiscount:product:completion:)")
  @available(macOS, unavailable, introduced: 10.14.4, renamed: "getPromotionalOffer(forProductDiscount:product:completion:)")
  @available(macCatalyst, unavailable, introduced: 12.2, renamed: "getPromotionalOffer(forProductDiscount:product:completion:)")
  public func checkPromotionalDiscountEligibility(forProductDiscount: RevenueCat.StoreProductDiscount, product: RevenueCat.StoreProduct, completion: @escaping (Swift.AnyObject, Swift.Error?) -> Swift.Void)
  @available(iOS, obsoleted: 1, renamed: "checkTrialOrIntroDiscountEligibility(_:completion:)")
  @available(tvOS, obsoleted: 1, renamed: "checkTrialOrIntroDiscountEligibility(_:completion:)")
  @available(watchOS, obsoleted: 1, renamed: "checkTrialOrIntroDiscountEligibility(_:completion:)")
  @available(macOS, obsoleted: 1, renamed: "checkTrialOrIntroDiscountEligibility(_:completion:)")
  @available(macCatalyst, obsoleted: 1, renamed: "checkTrialOrIntroDiscountEligibility(_:completion:)")
  @objc(checkTrialOrIntroductoryPriceEligibility:completion:) dynamic public func checkTrialOrIntroductoryPriceEligibility(_ productIdentifiers: [Swift.String], completion: @escaping ([Swift.String : RevenueCat.IntroEligibility]) -> Swift.Void)
  @available(iOS, unavailable, introduced: 12.2, message: "Check eligibility for a discount using getPromotionalOffer:")
  @available(tvOS, unavailable, introduced: 12.2, message: "Check eligibility for a discount using getPromotionalOffer:")
  @available(watchOS, unavailable, introduced: 6.2, message: "Check eligibility for a discount using getPromotionalOffer:")
  @available(macOS, unavailable, introduced: 10.14.4, message: "Check eligibility for a discount using getPromotionalOffer:")
  @available(macCatalyst, unavailable, introduced: 13.0, message: "Check eligibility for a discount using getPromotionalOffer:")
  @objc(paymentDiscountForProductDiscount:product:completion:) dynamic public func paymentDiscount(for discount: StoreKit.SKProductDiscount, product: StoreKit.SKProduct, completion: @escaping (StoreKit.SKPaymentDiscount?, Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS, unavailable, introduced: 13.0, message: "Check eligibility for a discount using getPromotionalOffer:")
  @available(tvOS, unavailable, introduced: 13.0, message: "Check eligibility for a discount using getPromotionalOffer:")
  @available(watchOS, unavailable, introduced: 6.2, message: "Check eligibility for a discount using getPromotionalOffer:")
  @available(macOS, unavailable, introduced: 10.15, message: "Check eligibility for a discount using getPromotionalOffer:")
  @available(macCatalyst, unavailable, introduced: 13.0, message: "Check eligibility for a discount using getPromotionalOffer:")
  public func paymentDiscount(for discount: StoreKit.SKProductDiscount, product: StoreKit.SKProduct) async throws -> StoreKit.SKPaymentDiscount
  #endif

  @available(iOS, obsoleted: 1, renamed: "logIn")
  @available(tvOS, obsoleted: 1, renamed: "logIn")
  @available(watchOS, obsoleted: 1, renamed: "logIn")
  @available(macOS, obsoleted: 1, renamed: "logIn")
  @objc(createAlias:completionBlock:) dynamic public func createAlias(_ alias: Swift.String, _ completion: ((RevenueCat.CustomerInfo?, Swift.Error?) -> Swift.Void)?)
  @available(iOS, obsoleted: 1, renamed: "logIn")
  @available(tvOS, obsoleted: 1, renamed: "logIn")
  @available(watchOS, obsoleted: 1, renamed: "logIn")
  @available(macOS, obsoleted: 1, renamed: "logIn")
  @objc(identify:completionBlock:) dynamic public func identify(_ appUserID: Swift.String, _ completion: ((RevenueCat.CustomerInfo?, Swift.Error?) -> Swift.Void)?)
  @available(iOS, obsoleted: 1, renamed: "logOut")
  @available(tvOS, obsoleted: 1, renamed: "logOut")
  @available(watchOS, obsoleted: 1, renamed: "logOut")
  @available(macOS, obsoleted: 1, renamed: "logOut")
  @objc(resetWithCompletionBlock:) dynamic public func reset(completion: ((RevenueCat.CustomerInfo?, Swift.Error?) -> Swift.Void)?)
}
@_inheritsConvenienceInitializers @available(iOS, obsoleted: 1, renamed: "CustomerInfo")
@available(tvOS, obsoleted: 1, renamed: "CustomerInfo")
@available(watchOS, obsoleted: 1, renamed: "CustomerInfo")
@available(macOS, obsoleted: 1, renamed: "CustomerInfo")
@objc(RCPurchaserInfo) public class PurchaserInfo : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS, obsoleted: 1, renamed: "StoreTransaction")
@available(tvOS, obsoleted: 1, renamed: "StoreTransaction")
@available(watchOS, obsoleted: 1, renamed: "StoreTransaction")
@available(macOS, obsoleted: 1, renamed: "StoreTransaction")
@objc(RCTransaction) public class Transaction : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension RevenueCat.Package {
  @available(iOS, obsoleted: 1, renamed: "storeProduct", message: "Use StoreProduct instead")
  @available(tvOS, obsoleted: 1, renamed: "storeProduct", message: "Use StoreProduct instead")
  @available(watchOS, obsoleted: 1, renamed: "storeProduct", message: "Use StoreProduct instead")
  @available(macOS, obsoleted: 1, renamed: "storeProduct", message: "Use StoreProduct instead")
  @available(macCatalyst, obsoleted: 1, renamed: "storeProduct", message: "Use StoreProduct instead")
  @objc dynamic public var product: StoreKit.SKProduct {
    @objc get
  }
}
extension RevenueCat.StoreProductDiscount.PaymentMode {
  @available(iOS, obsoleted: 1, message: "This option no longer exists. PaymentMode would be nil instead.")
  @available(tvOS, obsoleted: 1, message: "This option no longer exists. PaymentMode would be nil instead.")
  @available(watchOS, obsoleted: 1, message: "This option no longer exists. PaymentMode would be nil instead.")
  @available(macOS, obsoleted: 1, message: "This option no longer exists. PaymentMode would be nil instead.")
  @available(macCatalyst, obsoleted: 1, message: "This option no longer exists. PaymentMode would be nil instead.")
  public static var none: RevenueCat.StoreProductDiscount.PaymentMode {
    get
  }
}
@available(iOS, obsoleted: 1, renamed: "StoreProductDiscount.PaymentMode")
@available(tvOS, obsoleted: 1, renamed: "StoreProductDiscount.PaymentMode")
@available(watchOS, obsoleted: 1, renamed: "StoreProductDiscount.PaymentMode")
@available(macOS, obsoleted: 1, renamed: "StoreProductDiscount.PaymentMode")
@available(macCatalyst, obsoleted: 1, renamed: "StoreProductDiscount.PaymentMode")
public enum RCPaymentMode {
}
@_inheritsConvenienceInitializers @available(iOS, obsoleted: 1, message: "Use PromotionalOffer instead")
@available(tvOS, obsoleted: 1, message: "Use PromotionalOffer instead")
@available(watchOS, obsoleted: 1, message: "Use PromotionalOffer instead")
@available(macOS, obsoleted: 1, message: "Use PromotionalOffer instead")
@available(macCatalyst, obsoleted: 1, message: "Use PromotionalOffer instead")
@objc(RCPromotionalOfferEligibility) public class PromotionalOfferEligibility : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS, obsoleted: 1, message: "Use ErrorCode instead")
@available(tvOS, obsoleted: 1, message: "Use ErrorCode instead")
@available(watchOS, obsoleted: 1, message: "Use ErrorCode instead")
@available(macOS, obsoleted: 1, message: "Use ErrorCode instead")
@available(macCatalyst, obsoleted: 1, message: "Use ErrorCode instead")
public var ErrorDomain: Foundation.NSErrorDomain {
  get
}
@available(iOS, obsoleted: 1, message: "Use ErrorCode instead")
@available(tvOS, obsoleted: 1, message: "Use ErrorCode instead")
@available(watchOS, obsoleted: 1, message: "Use ErrorCode instead")
@available(macOS, obsoleted: 1, message: "Use ErrorCode instead")
@available(macCatalyst, obsoleted: 1, message: "Use ErrorCode instead")
public enum RCBackendErrorCode {
}
@objc @_inheritsConvenienceInitializers @available(iOS, obsoleted: 1)
@available(tvOS, obsoleted: 1)
@available(watchOS, obsoleted: 1)
@available(macOS, obsoleted: 1)
@available(macCatalyst, obsoleted: 1)
public class RCPurchasesErrorUtils : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension RevenueCat.Purchases {
  @available(iOS, obsoleted: 1, renamed: "ErrorCode")
  @available(tvOS, obsoleted: 1, renamed: "ErrorCode")
  @available(watchOS, obsoleted: 1, renamed: "ErrorCode")
  @available(macOS, obsoleted: 1, renamed: "ErrorCode")
  @available(macCatalyst, obsoleted: 1, renamed: "ErrorCode")
  public enum Errors {
  }
  @available(iOS, obsoleted: 1)
  @available(tvOS, obsoleted: 1)
  @available(watchOS, obsoleted: 1)
  @available(macOS, obsoleted: 1)
  @available(macCatalyst, obsoleted: 1)
  public enum FinishableKey {
  }
  @available(iOS, obsoleted: 1)
  @available(tvOS, obsoleted: 1)
  @available(watchOS, obsoleted: 1)
  @available(macOS, obsoleted: 1)
  @available(macCatalyst, obsoleted: 1)
  public enum ReadableErrorCodeKey {
  }
  @available(iOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(tvOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(watchOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macCatalyst, obsoleted: 1, message: "Remove `Purchases.`")
  public enum ErrorCode {
  }
  @available(iOS, obsoleted: 1)
  @available(tvOS, obsoleted: 1)
  @available(watchOS, obsoleted: 1)
  @available(macOS, obsoleted: 1)
  @available(macCatalyst, obsoleted: 1)
  public enum RevenueCatBackendErrorCode {
  }
  @available(iOS, obsoleted: 1, renamed: "StoreTransaction")
  @available(tvOS, obsoleted: 1, renamed: "StoreTransaction")
  @available(watchOS, obsoleted: 1, renamed: "StoreTransaction")
  @available(macOS, obsoleted: 1, renamed: "StoreTransaction")
  @available(macCatalyst, obsoleted: 1, renamed: "StoreTransaction")
  public enum Transaction {
  }
  @available(iOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(tvOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(watchOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macCatalyst, obsoleted: 1, message: "Remove `Purchases.`")
  public enum EntitlementInfo {
  }
  @available(iOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(tvOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(watchOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macCatalyst, obsoleted: 1, message: "Remove `Purchases.`")
  public enum EntitlementInfos {
  }
  @available(iOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(tvOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(watchOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macCatalyst, obsoleted: 1, message: "Remove `Purchases.`")
  public enum PackageType {
  }
  @available(iOS, obsoleted: 1, renamed: "CustomerInfo")
  @available(tvOS, obsoleted: 1, renamed: "CustomerInfo")
  @available(watchOS, obsoleted: 1, renamed: "CustomerInfo")
  @available(macOS, obsoleted: 1, renamed: "CustomerInfo")
  @available(macCatalyst, obsoleted: 1, renamed: "CustomerInfo")
  public enum PurchaserInfo {
  }
  @available(iOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(tvOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(watchOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macCatalyst, obsoleted: 1, message: "Remove `Purchases.`")
  public enum Offering {
  }
  @available(iOS, obsoleted: 1)
  @available(tvOS, obsoleted: 1)
  @available(watchOS, obsoleted: 1)
  @available(macOS, obsoleted: 1)
  @available(macCatalyst, obsoleted: 1)
  public enum ErrorUtils {
  }
  @available(iOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(tvOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(watchOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macCatalyst, obsoleted: 1, message: "Remove `Purchases.`")
  public enum Store {
  }
  @available(iOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(tvOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(watchOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macOS, obsoleted: 1, message: "Remove `Purchases.`")
  @available(macCatalyst, obsoleted: 1, message: "Remove `Purchases.`")
  public enum PeriodType {
  }
}
@_hasMissingDesignatedInitializers @objc(RCPromotionalOffer) final public class PromotionalOffer : ObjectiveC.NSObject {
  final public let discount: RevenueCat.StoreProductDiscount
  @objc deinit
}
@objc(RCPurchasesErrorCode) public enum ErrorCode : Swift.Int, Swift.Error {
  @objc(RCUnknownError) case unknownError = 0
  @objc(RCPurchaseCancelledError) case purchaseCancelledError = 1
  @objc(RCStoreProblemError) case storeProblemError = 2
  @objc(RCPurchaseNotAllowedError) case purchaseNotAllowedError = 3
  @objc(RCPurchaseInvalidError) case purchaseInvalidError = 4
  @objc(RCProductNotAvailableForPurchaseError) case productNotAvailableForPurchaseError = 5
  @objc(RCProductAlreadyPurchasedError) case productAlreadyPurchasedError = 6
  @objc(RCReceiptAlreadyInUseError) case receiptAlreadyInUseError = 7
  @objc(RCInvalidReceiptError) case invalidReceiptError = 8
  @objc(RCMissingReceiptFileError) case missingReceiptFileError = 9
  @objc(RCNetworkError) case networkError = 10
  @objc(RCInvalidCredentialsError) case invalidCredentialsError = 11
  @objc(RCUnexpectedBackendResponseError) case unexpectedBackendResponseError = 12
  @objc(RCReceiptInUseByOtherSubscriberError) case receiptInUseByOtherSubscriberError = 13
  @objc(RCInvalidAppUserIdError) case invalidAppUserIdError = 14
  @objc(RCOperationAlreadyInProgressForProductError) case operationAlreadyInProgressForProductError = 15
  @objc(RCUnknownBackendError) case unknownBackendError = 16
  @objc(RCInvalidAppleSubscriptionKeyError) case invalidAppleSubscriptionKeyError = 17
  @objc(RCIneligibleError) case ineligibleError = 18
  @objc(RCInsufficientPermissionsError) case insufficientPermissionsError = 19
  @objc(RCPaymentPendingError) case paymentPendingError = 20
  @objc(RCInvalidSubscriberAttributesError) case invalidSubscriberAttributesError = 21
  @objc(RCLogOutAnonymousUserError) case logOutAnonymousUserError = 22
  @objc(RCConfigurationError) case configurationError = 23
  @objc(RCUnsupportedError) case unsupportedError = 24
  @objc(RCEmptySubscriberAttributesError) case emptySubscriberAttributes = 25
  @objc(RCProductDiscountMissingIdentifierError) case productDiscountMissingIdentifierError = 26
  @objc(RCMissingAppUserIDForAliasCreationError) case missingAppUserIDForAliasCreationError = 27
  @objc(RCProductDiscountMissingSubscriptionGroupIdentifierError) case productDiscountMissingSubscriptionGroupIdentifierError = 28
  @objc(RCCustomerInfoError) case customerInfoError = 29
  @objc(RCSystemInfoError) case systemInfoError = 30
  @objc(RCBeginRefundRequestError) case beginRefundRequestError = 31
  @objc(RCProductRequestTimedOut) case productRequestTimedOut = 32
  @objc(RCAPIEndpointBlocked) case apiEndpointBlockedError = 33
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension RevenueCat.ErrorCode : Swift.CaseIterable {
  public typealias AllCases = [RevenueCat.ErrorCode]
  public static var allCases: [RevenueCat.ErrorCode] {
    get
  }
}
extension RevenueCat.ErrorCode {
  public var description: Swift.String {
    get
  }
}
extension RevenueCat.ErrorCode : Foundation.CustomNSError {
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@objc(RCRefundRequestStatus) public enum RefundRequestStatus : Swift.Int {
  @objc(RCRefundRequestUserCancelled) case userCancelled = 0
  @objc(RCRefundRequestSuccess) case success
  @objc(RCRefundRequestError) case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RevenueCat.Purchases {
  @objc(RCPlatformInfo) final public class PlatformInfo : ObjectiveC.NSObject {
    @objc public init(flavor: Swift.String, version: Swift.String)
    @objc deinit
  }
  @objc public static var platformInfo: RevenueCat.Purchases.PlatformInfo?
}
@_inheritsConvenienceInitializers @objc(RCDangerousSettings) public class DangerousSettings : ObjectiveC.NSObject {
  @objc final public let autoSyncPurchases: Swift.Bool
  @objc override convenience dynamic public init()
  @objc public init(autoSyncPurchases: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(RCCustomerInfo) public class CustomerInfo : ObjectiveC.NSObject {
  @objc final public let entitlements: RevenueCat.EntitlementInfos
  @objc public var activeSubscriptions: Swift.Set<Swift.String> {
    @objc get
  }
  @objc public var allPurchasedProductIdentifiers: Swift.Set<Swift.String> {
    @objc get
  }
  @objc public var latestExpirationDate: Foundation.Date? {
    @objc get
  }
  @available(*, deprecated, message: "use nonSubscriptionTransactions")
  @objc public var nonConsumablePurchases: Swift.Set<Swift.String> {
    @objc get
  }
  @objc final public let nonSubscriptionTransactions: [RevenueCat.StoreTransaction]
  @objc final public let requestDate: Foundation.Date
  @objc final public let firstSeen: Foundation.Date
  @objc final public let originalAppUserId: Swift.String
  @objc final public let managementURL: Foundation.URL?
  @objc final public let originalPurchaseDate: Foundation.Date?
  @objc final public let originalApplicationVersion: Swift.String?
  @objc final public let rawData: [Swift.String : Any]
  @objc public func expirationDate(forProductIdentifier productIdentifier: Swift.String) -> Foundation.Date?
  @objc public func purchaseDate(forProductIdentifier productIdentifier: Swift.String) -> Foundation.Date?
  @objc public func expirationDate(forEntitlement entitlementIdentifier: Swift.String) -> Foundation.Date?
  @objc public func purchaseDate(forEntitlement entitlementIdentifier: Swift.String) -> Foundation.Date?
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension RevenueCat.CustomerInfo : RevenueCat.RawDataContainer {
  public typealias Content = [Swift.String : Any]
}
@objc(RCStore) public enum Store : Swift.Int {
  @objc(RCAppStore) case appStore = 0
  @objc(RCMacAppStore) case macAppStore = 1
  @objc(RCPlayStore) case playStore = 2
  @objc(RCStripe) case stripe = 3
  @objc(RCPromotional) case promotional = 4
  @objc(RCUnknownStore) case unknownStore = 5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RevenueCat.Store : Swift.CaseIterable {
  public typealias AllCases = [RevenueCat.Store]
  public static var allCases: [RevenueCat.Store] {
    get
  }
}
@objc(RCPeriodType) public enum PeriodType : Swift.Int {
  @objc(RCNormal) case normal = 0
  @objc(RCIntro) case intro = 1
  @objc(RCTrial) case trial = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RevenueCat.PeriodType : Swift.CaseIterable {
  public typealias AllCases = [RevenueCat.PeriodType]
  public static var allCases: [RevenueCat.PeriodType] {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(RCEntitlementInfo) public class EntitlementInfo : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let isActive: Swift.Bool
  @objc final public let willRenew: Swift.Bool
  @objc final public let periodType: RevenueCat.PeriodType
  @objc final public let latestPurchaseDate: Foundation.Date?
  @objc final public let originalPurchaseDate: Foundation.Date?
  @objc final public let expirationDate: Foundation.Date?
  @objc final public let store: RevenueCat.Store
  @objc final public let productIdentifier: Swift.String
  @objc final public let isSandbox: Swift.Bool
  @objc final public let unsubscribeDetectedAt: Foundation.Date?
  @objc final public let billingIssueDetectedAt: Foundation.Date?
  @objc final public let ownershipType: RevenueCat.PurchaseOwnershipType
  @objc final public let rawData: [Swift.String : Any]
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
extension RevenueCat.EntitlementInfo : RevenueCat.RawDataContainer {
  public typealias Content = [Swift.String : Any]
}
extension RevenueCat.EntitlementInfo : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
@objc(RCLogLevel) public enum LogLevel : Swift.Int, Swift.CustomStringConvertible {
  case debug, info, warn, error
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias VerboseLogHandler = (_ level: RevenueCat.LogLevel, _ message: Swift.String, _ file: Swift.String?, _ function: Swift.String?, _ line: Swift.UInt) -> Swift.Void
public typealias LogHandler = (_ level: RevenueCat.LogLevel, _ message: Swift.String) -> Swift.Void
public typealias SK1Transaction = StoreKit.SKPaymentTransaction
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
public typealias SK2Transaction = StoreKit.Transaction
@_hasMissingDesignatedInitializers @objc(RCStoreTransaction) final public class StoreTransaction : ObjectiveC.NSObject {
  @objc final public var productIdentifier: Swift.String {
    @objc get
  }
  @objc final public var purchaseDate: Foundation.Date {
    @objc get
  }
  @objc final public var transactionIdentifier: Swift.String {
    @objc get
  }
  @objc final public var quantity: Swift.Int {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
extension RevenueCat.StoreTransaction {
  @objc final public var sk1Transaction: RevenueCat.SK1Transaction? {
    @objc get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  final public var sk2Transaction: RevenueCat.SK2Transaction? {
    get
  }
}
extension RevenueCat.StoreTransaction : Swift.Identifiable {
  final public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
public protocol RawDataContainer {
  associatedtype Content
  var rawData: Self.Content { get }
}
public typealias PurchaseResultData = (transaction: RevenueCat.StoreTransaction?, customerInfo: RevenueCat.CustomerInfo, userCancelled: Swift.Bool)
public typealias PurchaseCompletedBlock = (RevenueCat.StoreTransaction?, RevenueCat.CustomerInfo?, Swift.Error?, Swift.Bool) -> Swift.Void
public typealias DeferredPromotionalPurchaseBlock = (@escaping RevenueCat.PurchaseCompletedBlock) -> Swift.Void
@_hasMissingDesignatedInitializers @objc(RCPurchases) public class Purchases : ObjectiveC.NSObject {
  @objc(sharedPurchases) public static var shared: RevenueCat.Purchases {
    @objc get
  }
  @objc public static var isConfigured: Swift.Bool {
    @objc get
  }
  @objc public var delegate: RevenueCat.PurchasesDelegate? {
    @objc get
    @objc set
  }
  @objc public static var automaticAppleSearchAdsAttributionCollection: Swift.Bool
  @objc public static var logLevel: RevenueCat.LogLevel {
    @objc get
    @objc set
  }
  @objc public static var proxyURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc public static var forceUniversalAppStore: Swift.Bool {
    @objc get
    @objc set
  }
  @available(iOS 8.0, macOS 10.14, watchOS 6.2, macCatalyst 13.0, *)
  @objc public static var simulatesAskToBuyInSandbox: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static func canMakePayments() -> Swift.Bool
  @objc public static var logHandler: RevenueCat.LogHandler {
    @objc get
    @objc set
  }
  @objc public static var verboseLogHandler: RevenueCat.VerboseLogHandler {
    @objc get
    @objc set
  }
  @objc public static var verboseLogs: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static var frameworkVersion: Swift.String {
    @objc get
  }
  @objc public var finishTransactions: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func collectDeviceIdentifiers()
  @objc deinit
}
extension RevenueCat.Purchases {
  @objc dynamic public func setAttributes(_ attributes: [Swift.String : Swift.String])
  @objc dynamic public func setEmail(_ email: Swift.String?)
  @objc dynamic public func setPhoneNumber(_ phoneNumber: Swift.String?)
  @objc dynamic public func setDisplayName(_ displayName: Swift.String?)
  @objc dynamic public func setPushToken(_ pushToken: Foundation.Data?)
  @objc dynamic public func setAdjustID(_ adjustID: Swift.String?)
  @objc dynamic public func setAppsflyerID(_ appsflyerID: Swift.String?)
  @objc dynamic public func setFBAnonymousID(_ fbAnonymousID: Swift.String?)
  @objc dynamic public func setMparticleID(_ mparticleID: Swift.String?)
  @objc dynamic public func setOnesignalID(_ onesignalID: Swift.String?)
  @objc dynamic public func setAirshipChannelID(_ airshipChannelID: Swift.String?)
  @objc dynamic public func setCleverTapID(_ cleverTapID: Swift.String?)
  @objc dynamic public func setMediaSource(_ mediaSource: Swift.String?)
  @objc dynamic public func setCampaign(_ campaign: Swift.String?)
  @objc dynamic public func setAdGroup(_ adGroup: Swift.String?)
  @objc dynamic public func setAd(_ installAd: Swift.String?)
  @objc dynamic public func setKeyword(_ keyword: Swift.String?)
  @objc dynamic public func setCreative(_ creative: Swift.String?)
}
extension RevenueCat.Purchases {
  @objc dynamic public var appUserID: Swift.String {
    @objc get
  }
  @objc dynamic public var isAnonymous: Swift.Bool {
    @objc get
  }
  @objc(logIn:completion:) dynamic public func logIn(_ appUserID: Swift.String, completion: @escaping (RevenueCat.CustomerInfo?, Swift.Bool, Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func logIn(_ appUserID: Swift.String) async throws -> (customerInfo: RevenueCat.CustomerInfo, created: Swift.Bool)
  #endif

  @objc dynamic public func logOut(completion: ((RevenueCat.CustomerInfo?, Swift.Error?) -> Swift.Void)?)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func logOut() async throws -> RevenueCat.CustomerInfo
  #endif

  @objc dynamic public func getOfferings(completion: @escaping (RevenueCat.Offerings?, Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func offerings() async throws -> RevenueCat.Offerings
  #endif

}
extension RevenueCat.Purchases {
  @objc dynamic public func getCustomerInfo(completion: @escaping (RevenueCat.CustomerInfo?, Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func customerInfo() async throws -> RevenueCat.CustomerInfo
  #endif

  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public var customerInfoStream: _Concurrency.AsyncStream<RevenueCat.CustomerInfo> {
    get
  }
  @objc(getProductsWithIdentifiers:completion:) dynamic public func getProducts(_ productIdentifiers: [Swift.String], completion: @escaping ([RevenueCat.StoreProduct]) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func products(_ productIdentifiers: [Swift.String]) async -> [RevenueCat.StoreProduct]
  #endif

  @objc(purchaseProduct:withCompletion:) dynamic public func purchase(product: RevenueCat.StoreProduct, completion: @escaping RevenueCat.PurchaseCompletedBlock)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func purchase(product: RevenueCat.StoreProduct) async throws -> RevenueCat.PurchaseResultData
  #endif

  @objc(purchasePackage:withCompletion:) dynamic public func purchase(package: RevenueCat.Package, completion: @escaping RevenueCat.PurchaseCompletedBlock)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func purchase(package: RevenueCat.Package) async throws -> RevenueCat.PurchaseResultData
  #endif

  @available(iOS 12.2, macOS 10.14.4, watchOS 6.2, macCatalyst 13.0, tvOS 12.2, *)
  @objc(purchaseProduct:withPromotionalOffer:completion:) dynamic public func purchase(product: RevenueCat.StoreProduct, promotionalOffer: RevenueCat.PromotionalOffer, completion: @escaping RevenueCat.PurchaseCompletedBlock)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func purchase(product: RevenueCat.StoreProduct, promotionalOffer: RevenueCat.PromotionalOffer) async throws -> RevenueCat.PurchaseResultData
  #endif

  @available(iOS 12.2, macOS 10.14.4, watchOS 6.2, macCatalyst 13.0, tvOS 12.2, *)
  @objc(purchasePackage:withPromotionalOffer:completion:) dynamic public func purchase(package: RevenueCat.Package, promotionalOffer: RevenueCat.PromotionalOffer, completion: @escaping RevenueCat.PurchaseCompletedBlock)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func purchase(package: RevenueCat.Package, promotionalOffer: RevenueCat.PromotionalOffer) async throws -> RevenueCat.PurchaseResultData
  #endif

  @objc dynamic public func syncPurchases(completion: ((RevenueCat.CustomerInfo?, Swift.Error?) -> Swift.Void)?)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func syncPurchases() async throws -> RevenueCat.CustomerInfo
  #endif

  @objc dynamic public func restorePurchases(completion: ((RevenueCat.CustomerInfo?, Swift.Error?) -> Swift.Void)? = nil)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func restorePurchases() async throws -> RevenueCat.CustomerInfo
  #endif

  @objc(checkTrialOrIntroDiscountEligibility:completion:) dynamic public func checkTrialOrIntroDiscountEligibility(_ productIdentifiers: [Swift.String], completion: @escaping ([Swift.String : RevenueCat.IntroEligibility]) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, tvOS 13.0, macOS 10.15, watchOS 6.2, *)
  public func checkTrialOrIntroDiscountEligibility(_ productIdentifiers: [Swift.String]) async -> [Swift.String : RevenueCat.IntroEligibility]
  #endif

  @objc dynamic public func invalidateCustomerInfoCache()
  @available(iOS 12.2, macOS 10.14.4, macCatalyst 13.0, tvOS 12.2, watchOS 6.2, *)
  @objc(getPromotionalOfferForProductDiscount:withProduct:withCompletion:) dynamic public func getPromotionalOffer(forProductDiscount discount: RevenueCat.StoreProductDiscount, product: RevenueCat.StoreProduct, completion: @escaping (RevenueCat.PromotionalOffer?, Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func getPromotionalOffer(forProductDiscount discount: RevenueCat.StoreProductDiscount, product: RevenueCat.StoreProduct) async throws -> RevenueCat.PromotionalOffer
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
  public func getEligiblePromotionalOffers(forProduct product: RevenueCat.StoreProduct) async -> [RevenueCat.PromotionalOffer]
  #endif

  @available(iOS 13.0, macOS 10.15, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @objc dynamic public func showManageSubscriptions(completion: @escaping (Swift.Error?) -> Swift.Void)
  
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func showManageSubscriptions() async throws
  #endif

}
extension RevenueCat.Purchases {
  @discardableResult
  @objc(configureWithAPIKey:) public static func configure(withAPIKey apiKey: Swift.String) -> RevenueCat.Purchases
  @discardableResult
  @objc(configureWithAPIKey:appUserID:) public static func configure(withAPIKey apiKey: Swift.String, appUserID: Swift.String?) -> RevenueCat.Purchases
  @discardableResult
  @objc(configureWithAPIKey:appUserID:observerMode:) public static func configure(withAPIKey apiKey: Swift.String, appUserID: Swift.String?, observerMode: Swift.Bool) -> RevenueCat.Purchases
  @discardableResult
  @objc(configureWithAPIKey:appUserID:observerMode:userDefaults:) public static func configure(withAPIKey apiKey: Swift.String, appUserID: Swift.String?, observerMode: Swift.Bool, userDefaults: Foundation.UserDefaults?) -> RevenueCat.Purchases
  @discardableResult
  @objc(configureWithAPIKey:appUserID:observerMode:userDefaults:useStoreKit2IfAvailable:) public static func configure(withAPIKey apiKey: Swift.String, appUserID: Swift.String?, observerMode: Swift.Bool, userDefaults: Foundation.UserDefaults?, useStoreKit2IfAvailable: Swift.Bool) -> RevenueCat.Purchases
  @discardableResult
  @objc(configureWithAPIKey:appUserID:observerMode:userDefaults:useStoreKit2IfAvailable:dangerousSettings:) public static func configure(withAPIKey apiKey: Swift.String, appUserID: Swift.String?, observerMode: Swift.Bool, userDefaults: Foundation.UserDefaults?, useStoreKit2IfAvailable: Swift.Bool, dangerousSettings: RevenueCat.DangerousSettings?) -> RevenueCat.Purchases
}
extension RevenueCat.Purchases {
  @objc dynamic public func shouldPurchasePromoProduct(_ product: RevenueCat.StoreProduct, defermentBlock: @escaping RevenueCat.DeferredPromotionalPurchaseBlock)
}
extension RevenueCat.Purchases {
  @available(*, deprecated, message: "use Purchases.logLevel instead")
  @objc public static var debugLogsEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Configure behavior through the RevenueCat dashboard instead")
  @objc dynamic public var allowSharingAppStoreAccount: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Use the set<NetworkId> functions instead")
  @objc public static func addAttributionData(_ data: [Swift.String : Any], fromNetwork network: RevenueCat.AttributionNetwork)
  @available(*, deprecated, message: "Use the set<NetworkId> functions instead")
  @objc(addAttributionData:fromNetwork:forNetworkUserId:) public static func addAttributionData(_ data: [Swift.String : Any], from network: RevenueCat.AttributionNetwork, forNetworkUserId networkUserId: Swift.String?)
}
@objc(RCSubscriptionPeriod) public class SubscriptionPeriod : ObjectiveC.NSObject {
  @objc final public let value: Swift.Int
  @objc final public let unit: RevenueCat.SubscriptionPeriod.Unit
  public init(value: Swift.Int, unit: RevenueCat.SubscriptionPeriod.Unit)
  @objc(RCSubscriptionPeriodUnit) public enum Unit : Swift.Int {
    case day = 0
    case week = 1
    case month = 2
    case year = 3
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
extension RevenueCat.SubscriptionPeriod {
  @available(iOS, unavailable, renamed: "value")
  @available(tvOS, unavailable, renamed: "value")
  @available(watchOS, unavailable, renamed: "value")
  @available(macOS, unavailable, renamed: "value")
  @objc dynamic public var numberOfUnits: Swift.Int {
    @objc get
  }
}
extension RevenueCat.SubscriptionPeriod.Unit : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension RevenueCat.SubscriptionPeriod {
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
}
extension RevenueCat.SubscriptionPeriod.Unit : Swift.Encodable {
}
extension RevenueCat.SubscriptionPeriod : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@objc(RCPurchaseOwnershipType) public enum PurchaseOwnershipType : Swift.Int {
  case purchased = 0
  case familyShared = 1
  case unknown = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RevenueCat.PurchaseOwnershipType : Swift.CaseIterable {
  public typealias AllCases = [RevenueCat.PurchaseOwnershipType]
  public static var allCases: [RevenueCat.PurchaseOwnershipType] {
    get
  }
}
extension RevenueCat.PurchaseOwnershipType : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension RevenueCat.PeriodType : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension RevenueCat.Store : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(RCEntitlementInfos) public class EntitlementInfos : ObjectiveC.NSObject {
  @objc final public let all: [Swift.String : RevenueCat.EntitlementInfo]
  @objc public var active: [Swift.String : RevenueCat.EntitlementInfo] {
    @objc get
  }
  @objc public subscript(key: Swift.String) -> RevenueCat.EntitlementInfo? {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc(RCPackageType) public enum PackageType : Swift.Int {
  case unknown = -2, custom, lifetime, annual, sixMonth, threeMonth, twoMonth, monthly, weekly
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(RCPackage) public class Package : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let packageType: RevenueCat.PackageType
  @objc final public let storeProduct: RevenueCat.StoreProduct
  @objc final public let offeringIdentifier: Swift.String
  @objc public var localizedPriceString: Swift.String {
    @objc get
  }
  @objc public var localizedIntroductoryPriceString: Swift.String? {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@objc extension RevenueCat.Package {
  @objc public static func string(from packageType: RevenueCat.PackageType) -> Swift.String?
  @objc dynamic public class func packageType(from string: Swift.String) -> RevenueCat.PackageType
}
extension RevenueCat.Package : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
@objc(RCIntroEligibilityStatus) public enum IntroEligibilityStatus : Swift.Int {
  case unknown = 0
  case ineligible
  case eligible
  case noIntroOfferExists
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RevenueCat.IntroEligibilityStatus : Swift.CaseIterable {
  public typealias AllCases = [RevenueCat.IntroEligibilityStatus]
  public static var allCases: [RevenueCat.IntroEligibilityStatus] {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(RCIntroEligibility) public class IntroEligibility : ObjectiveC.NSObject {
  @objc final public let status: RevenueCat.IntroEligibilityStatus
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@available(iOS 11.2, macOS 10.13.2, tvOS 11.2, watchOS 6.2, *)
public typealias SK1ProductDiscount = StoreKit.SKProductDiscount
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
public typealias SK2ProductDiscount = StoreKit.Product.SubscriptionOffer
@_hasMissingDesignatedInitializers @objc(RCStoreProductDiscount) final public class StoreProductDiscount : ObjectiveC.NSObject {
  @objc(RCPaymentMode) public enum PaymentMode : Swift.Int {
    case payAsYouGo = 0
    case payUpFront = 1
    case freeTrial = 2
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(RCDiscountType) public enum DiscountType : Swift.Int {
    case introductory = 0
    case promotional = 1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public var offerIdentifier: Swift.String? {
    @objc get
  }
  @objc final public var currencyCode: Swift.String? {
    @objc get
  }
  final public var price: Foundation.Decimal {
    get
  }
  @objc final public var localizedPriceString: Swift.String {
    @objc get
  }
  @objc final public var paymentMode: RevenueCat.StoreProductDiscount.PaymentMode {
    @objc get
  }
  @objc final public var subscriptionPeriod: RevenueCat.SubscriptionPeriod {
    @objc get
  }
  @objc final public var type: RevenueCat.StoreProductDiscount.DiscountType {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
extension RevenueCat.StoreProductDiscount {
  @objc(price) final public var priceDecimalNumber: Foundation.NSDecimalNumber {
    @objc get
  }
}
extension RevenueCat.StoreProductDiscount {
  public struct Data : Swift.Hashable {
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: RevenueCat.StoreProductDiscount.Data, b: RevenueCat.StoreProductDiscount.Data) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension RevenueCat.StoreProductDiscount {
  @available(iOS 12.2, macOS 10.14.4, tvOS 12.2, watchOS 6.2, *)
  @objc final public var sk1Discount: RevenueCat.SK1ProductDiscount? {
    @objc get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  final public var sk2Discount: RevenueCat.SK2ProductDiscount? {
    get
  }
}
extension RevenueCat.StoreProductDiscount : Swift.Encodable {
  final public func encode(to encoder: Swift.Encoder) throws
}
extension RevenueCat.StoreProductDiscount.PaymentMode : Swift.Encodable {
}
extension RevenueCat.StoreProductDiscount : Swift.Identifiable {
  final public var id: RevenueCat.StoreProductDiscount.Data {
    get
  }
  public typealias ID = RevenueCat.StoreProductDiscount.Data
}
@objc(RCPurchasesDelegate) public protocol PurchasesDelegate : ObjectiveC.NSObjectProtocol {
  @available(swift, obsoleted: 1, renamed: "purchases(_:receivedUpdated:)")
  @available(iOS, obsoleted: 1)
  @available(macOS, obsoleted: 1)
  @available(tvOS, obsoleted: 1)
  @available(watchOS, obsoleted: 1)
  @objc(purchases:didReceiveUpdatedPurchaserInfo:) optional func purchases(_ purchases: RevenueCat.Purchases, didReceiveUpdated purchaserInfo: RevenueCat.CustomerInfo)
  @objc(purchases:receivedUpdatedCustomerInfo:) optional func purchases(_ purchases: RevenueCat.Purchases, receivedUpdated customerInfo: RevenueCat.CustomerInfo)
  @objc optional func purchases(_ purchases: RevenueCat.Purchases, shouldPurchasePromoProduct product: RevenueCat.StoreProduct, defermentBlock makeDeferredPurchase: @escaping RevenueCat.DeferredPromotionalPurchaseBlock)
}
@objc(RCAttributionNetwork) public enum AttributionNetwork : Swift.Int {
  case appleSearchAds
  case adjust
  case appsFlyer
  case branch
  case tenjin
  case facebook
  case mParticle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias SK1Product = StoreKit.SKProduct
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
public typealias SK2Product = StoreKit.Product
@_hasMissingDesignatedInitializers @objc(RCStoreProduct) final public class StoreProduct : ObjectiveC.NSObject {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc final public var productType: RevenueCat.StoreProduct.ProductType {
    @objc get
  }
  @objc final public var productCategory: RevenueCat.StoreProduct.ProductCategory {
    @objc get
  }
  @objc final public var localizedDescription: Swift.String {
    @objc get
  }
  @objc final public var localizedTitle: Swift.String {
    @objc get
  }
  @objc final public var currencyCode: Swift.String? {
    @objc get
  }
  final public var price: Foundation.Decimal {
    get
  }
  @objc final public var localizedPriceString: Swift.String {
    @objc get
  }
  @objc final public var productIdentifier: Swift.String {
    @objc get
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 8.0, *)
  @objc final public var isFamilyShareable: Swift.Bool {
    @objc get
  }
  @available(iOS 12.0, macCatalyst 13.0, tvOS 12.0, macOS 10.14, watchOS 6.2, *)
  @objc final public var subscriptionGroupIdentifier: Swift.String? {
    @objc get
  }
  @objc final public var priceFormatter: Foundation.NumberFormatter? {
    @objc get
  }
  @available(iOS 11.2, macOS 10.13.2, tvOS 11.2, watchOS 6.2, *)
  @objc final public var subscriptionPeriod: RevenueCat.SubscriptionPeriod? {
    @objc get
  }
  @available(iOS 11.2, macOS 10.13.2, tvOS 11.2, watchOS 6.2, *)
  @objc final public var introductoryDiscount: RevenueCat.StoreProductDiscount? {
    @objc get
  }
  @available(iOS 12.2, macOS 10.14.4, tvOS 12.2, watchOS 6.2, *)
  @objc final public var discounts: [RevenueCat.StoreProductDiscount] {
    @objc get
  }
  @objc deinit
}
extension RevenueCat.StoreProduct {
  @objc(price) final public var priceDecimalNumber: Foundation.NSDecimalNumber {
    @objc get
  }
  @available(iOS 11.2, macOS 10.13.2, tvOS 11.2, watchOS 6.2, *)
  @objc final public var pricePerMonth: Foundation.NSDecimalNumber? {
    @objc get
  }
  @objc final public var localizedIntroductoryPriceString: Swift.String? {
    @objc get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
extension RevenueCat.StoreProduct {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func getEligiblePromotionalOffers() async -> [RevenueCat.PromotionalOffer]
  #endif

}
extension RevenueCat.StoreProduct {
  @objc final public var sk1Product: RevenueCat.SK1Product? {
    @objc get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  final public var sk2Product: RevenueCat.SK2Product? {
    get
  }
}
extension RevenueCat.StoreProduct {
  @available(iOS, unavailable, introduced: 11.2, renamed: "introductoryDiscount", message: "Use StoreProductDiscount instead")
  @available(tvOS, unavailable, introduced: 11.2, renamed: "introductoryDiscount", message: "Use StoreProductDiscount instead")
  @available(watchOS, unavailable, introduced: 6.2, renamed: "introductoryDiscount", message: "Use StoreProductDiscount instead")
  @available(macOS, unavailable, introduced: 10.13.2, renamed: "introductoryDiscount", message: "Use StoreProductDiscount instead")
  @objc final public var introductoryPrice: StoreKit.SKProductDiscount? {
    @objc get
  }
  @available(iOS, unavailable, message: "Use localizedPriceString instead")
  @available(tvOS, unavailable, message: "Use localizedPriceString instead")
  @available(watchOS, unavailable, message: "Use localizedPriceString instead")
  @available(macOS, unavailable, message: "Use localizedPriceString instead")
  @objc final public var priceLocale: Foundation.Locale {
    @objc get
  }
}
extension RevenueCat.StoreProduct.ProductCategory : Swift.Equatable {}
extension RevenueCat.StoreProduct.ProductCategory : Swift.Hashable {}
extension RevenueCat.StoreProduct.ProductCategory : Swift.RawRepresentable {}
extension RevenueCat.StoreProduct.ProductType : Swift.Equatable {}
extension RevenueCat.StoreProduct.ProductType : Swift.Hashable {}
extension RevenueCat.StoreProduct.ProductType : Swift.RawRepresentable {}
extension RevenueCat.StoreProductDiscount.PaymentMode : Swift.Equatable {}
extension RevenueCat.StoreProductDiscount.PaymentMode : Swift.Hashable {}
extension RevenueCat.StoreProductDiscount.PaymentMode : Swift.RawRepresentable {}
extension RevenueCat.ErrorCode : Swift.Equatable {}
extension RevenueCat.ErrorCode : Swift.Hashable {}
extension RevenueCat.ErrorCode : Swift.RawRepresentable {}
extension RevenueCat.ErrorCode : Swift.CustomStringConvertible {}
extension RevenueCat.RefundRequestStatus : Swift.Equatable {}
extension RevenueCat.RefundRequestStatus : Swift.Hashable {}
extension RevenueCat.RefundRequestStatus : Swift.RawRepresentable {}
extension RevenueCat.Store : Swift.Equatable {}
extension RevenueCat.Store : Swift.Hashable {}
extension RevenueCat.Store : Swift.RawRepresentable {}
extension RevenueCat.PeriodType : Swift.Equatable {}
extension RevenueCat.PeriodType : Swift.Hashable {}
extension RevenueCat.PeriodType : Swift.RawRepresentable {}
extension RevenueCat.LogLevel : Swift.Equatable {}
extension RevenueCat.LogLevel : Swift.Hashable {}
extension RevenueCat.LogLevel : Swift.RawRepresentable {}
extension RevenueCat.SubscriptionPeriod.Unit : Swift.Equatable {}
extension RevenueCat.SubscriptionPeriod.Unit : Swift.Hashable {}
extension RevenueCat.SubscriptionPeriod.Unit : Swift.RawRepresentable {}
extension RevenueCat.PurchaseOwnershipType : Swift.Equatable {}
extension RevenueCat.PurchaseOwnershipType : Swift.Hashable {}
extension RevenueCat.PurchaseOwnershipType : Swift.RawRepresentable {}
extension RevenueCat.PackageType : Swift.Equatable {}
extension RevenueCat.PackageType : Swift.Hashable {}
extension RevenueCat.PackageType : Swift.RawRepresentable {}
extension RevenueCat.IntroEligibilityStatus : Swift.Equatable {}
extension RevenueCat.IntroEligibilityStatus : Swift.Hashable {}
extension RevenueCat.IntroEligibilityStatus : Swift.RawRepresentable {}
extension RevenueCat.StoreProductDiscount.DiscountType : Swift.Equatable {}
extension RevenueCat.StoreProductDiscount.DiscountType : Swift.Hashable {}
extension RevenueCat.StoreProductDiscount.DiscountType : Swift.RawRepresentable {}
extension RevenueCat.AttributionNetwork : Swift.Equatable {}
extension RevenueCat.AttributionNetwork : Swift.Hashable {}
extension RevenueCat.AttributionNetwork : Swift.RawRepresentable {}
